import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, f as claim_element, g as children, c as claim_space, h as claim_text, b as detach_dev, k as attr_dev, j as add_location, l as insert_dev, m as append_dev, n as noop, u as create_component, q as query_selector_all, w as claim_component, x as mount_component, p as set_data_dev, y as transition_in, z as transition_out, A as destroy_component } from './client.a75ef49a.js';

/* src/components/Bio.svelte generated by Svelte v3.31.2 */

const file = "src/components/Bio.svelte";

function create_fragment(ctx) {
	let div;
	let img;
	let img_src_value;
	let t0;
	let p;
	let t1;
	let strong;
	let t2;
	let t3;
	let a0;
	let t4;
	let t5;
	let a1;
	let t6;
	let t7;
	let a2;
	let t8;
	let t9;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			t0 = space();
			p = element("p");
			t1 = text("Hi, I'm ");
			strong = element("strong");
			t2 = text("Maxi");
			t3 = text(". I'm a software engineer and data scientist from Córdoba, Argentina.\n    You can follow me on ");
			a0 = element("a");
			t4 = text("Twitter");
			t5 = text(",\n    see some of my work on ");
			a1 = element("a");
			t6 = text("GitHub");
			t7 = text(",\n    or read more about me on ");
			a2 = element("a");
			t8 = text("my website");
			t9 = text(".");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, "Hi, I'm ");
			strong = claim_element(p_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t2 = claim_text(strong_nodes, "Maxi");
			strong_nodes.forEach(detach_dev);
			t3 = claim_text(p_nodes, ". I'm a software engineer and data scientist from Córdoba, Argentina.\n    You can follow me on ");
			a0 = claim_element(p_nodes, "A", { href: true, target: true });
			var a0_nodes = children(a0);
			t4 = claim_text(a0_nodes, "Twitter");
			a0_nodes.forEach(detach_dev);
			t5 = claim_text(p_nodes, ",\n    see some of my work on ");
			a1 = claim_element(p_nodes, "A", { href: true, target: true });
			var a1_nodes = children(a1);
			t6 = claim_text(a1_nodes, "GitHub");
			a1_nodes.forEach(detach_dev);
			t7 = claim_text(p_nodes, ",\n    or read more about me on ");
			a2 = claim_element(p_nodes, "A", { href: true, target: true });
			var a2_nodes = children(a2);
			t8 = claim_text(a2_nodes, "my website");
			a2_nodes.forEach(detach_dev);
			t9 = claim_text(p_nodes, ".");
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "profile-pic.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Maxi Ferreira");
			attr_dev(img, "class", "svelte-1ulceh0");
			add_location(img, file, 21, 2, 275);
			add_location(strong, file, 23, 12, 341);
			attr_dev(a0, "href", "https://www.twitter.com/Charca");
			attr_dev(a0, "target", "_blank");
			add_location(a0, file, 24, 25, 457);
			attr_dev(a1, "href", "https://www.github.com/Charca");
			attr_dev(a1, "target", "_blank");
			add_location(a1, file, 25, 27, 554);
			attr_dev(a2, "href", "https://www.maxiferreira.com");
			attr_dev(a2, "target", "_blank");
			add_location(a2, file, 26, 29, 651);
			attr_dev(p, "class", "svelte-1ulceh0");
			add_location(p, file, 22, 2, 325);
			attr_dev(div, "class", "svelte-1ulceh0");
			add_location(div, file, 20, 0, 267);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t0);
			append_dev(div, p);
			append_dev(p, t1);
			append_dev(p, strong);
			append_dev(strong, t2);
			append_dev(p, t3);
			append_dev(p, a0);
			append_dev(a0, t4);
			append_dev(p, t5);
			append_dev(p, a1);
			append_dev(a1, t6);
			append_dev(p, t7);
			append_dev(p, a2);
			append_dev(a2, t8);
			append_dev(p, t9);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Bio", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Bio> was created with unknown prop '${key}'`);
	});

	return [];
}

class Bio extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Bio",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/blog/[slug].svelte generated by Svelte v3.31.2 */
const file$1 = "src/routes/blog/[slug].svelte";

function create_fragment$1(ctx) {
	let title_value;
	let meta0;
	let meta1;
	let meta1_content_value;
	let meta2;
	let meta2_content_value;
	let meta3;
	let meta3_content_value;
	let meta4;
	let meta5;
	let meta5_value_value;
	let meta6;
	let meta6_content_value;
	let meta7;
	let meta8;
	let meta8_value_value;
	let meta9;
	let meta10;
	let meta10_value_value;
	let t0;
	let header;
	let p;
	let t1_value = /*post*/ ctx[0].printDate + "";
	let t1;
	let t2;
	let t3_value = /*post*/ ctx[0].printReadingTime + "";
	let t3;
	let t4;
	let h1;
	let t5_value = /*post*/ ctx[0].title + "";
	let t5;
	let t6;
	let hr0;
	let t7;
	let div;
	let article;
	let raw_value = /*post*/ ctx[0].html + "";
	let t8;
	let hr1;
	let t9;
	let bio;
	let current;
	document.title = title_value = /*post*/ ctx[0].title;
	bio = new Bio({ $$inline: true });

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			meta5 = element("meta");
			meta6 = element("meta");
			meta7 = element("meta");
			meta8 = element("meta");
			meta9 = element("meta");
			meta10 = element("meta");
			t0 = space();
			header = element("header");
			p = element("p");
			t1 = text(t1_value);
			t2 = text(" ~ ");
			t3 = text(t3_value);
			t4 = space();
			h1 = element("h1");
			t5 = text(t5_value);
			t6 = space();
			hr0 = element("hr");
			t7 = space();
			div = element("div");
			article = element("article");
			t8 = space();
			hr1 = element("hr");
			t9 = space();
			create_component(bio.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-hgu7ve\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { property: true, content: true });
			meta1 = claim_element(head_nodes, "META", { property: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			meta3 = claim_element(head_nodes, "META", { property: true, content: true });
			meta4 = claim_element(head_nodes, "META", { name: true, content: true });
			meta5 = claim_element(head_nodes, "META", { name: true, value: true });
			meta6 = claim_element(head_nodes, "META", { name: true, content: true });
			meta7 = claim_element(head_nodes, "META", { name: true, value: true });
			meta8 = claim_element(head_nodes, "META", { name: true, value: true });
			meta9 = claim_element(head_nodes, "META", { name: true, value: true });
			meta10 = claim_element(head_nodes, "META", { name: true, value: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			header = claim_element(nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			p = claim_element(header_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			t2 = claim_text(p_nodes, " ~ ");
			t3 = claim_text(p_nodes, t3_value);
			p_nodes.forEach(detach_dev);
			t4 = claim_space(header_nodes);
			h1 = claim_element(header_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t5 = claim_text(h1_nodes, t5_value);
			h1_nodes.forEach(detach_dev);
			t6 = claim_space(header_nodes);
			hr0 = claim_element(header_nodes, "HR", { class: true });
			header_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			article = claim_element(div_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			article_nodes.forEach(detach_dev);
			t8 = claim_space(div_nodes);
			hr1 = claim_element(div_nodes, "HR", {});
			t9 = claim_space(div_nodes);
			claim_component(bio.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "property", "og:type");
			attr_dev(meta0, "content", "article");
			add_location(meta0, file$1, 50, 1, 1092);
			attr_dev(meta1, "property", "og:title");
			attr_dev(meta1, "content", meta1_content_value = /*post*/ ctx[0].title);
			add_location(meta1, file$1, 51, 1, 1139);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", meta2_content_value = /*post*/ ctx[0].excerpt);
			add_location(meta2, file$1, 52, 1, 1190);
			attr_dev(meta3, "property", "og:description");
			attr_dev(meta3, "content", meta3_content_value = /*post*/ ctx[0].excerpt);
			add_location(meta3, file$1, 53, 1, 1242);
			attr_dev(meta4, "name", "twitter:card");
			attr_dev(meta4, "content", "summary_large_image");
			add_location(meta4, file$1, 58, 1, 1397);
			attr_dev(meta5, "name", "twitter:title");
			attr_dev(meta5, "value", meta5_value_value = /*post*/ ctx[0].title);
			add_location(meta5, file$1, 66, 1, 1638);
			attr_dev(meta6, "name", "twitter:description");
			attr_dev(meta6, "content", meta6_content_value = /*post*/ ctx[0].excerpt);
			add_location(meta6, file$1, 67, 1, 1688);
			attr_dev(meta7, "name", "twitter:label1");
			attr_dev(meta7, "value", "Published on");
			add_location(meta7, file$1, 72, 1, 1883);
			attr_dev(meta8, "name", "twitter:data1");

			attr_dev(meta8, "value", meta8_value_value = new Date(/*post*/ ctx[0].printDate).toLocaleDateString(undefined, {
				year: "numeric",
				month: "short",
				day: "numeric"
			}));

			add_location(meta8, file$1, 73, 1, 1936);
			attr_dev(meta9, "name", "twitter:label2");
			attr_dev(meta9, "value", "Reading Time");
			add_location(meta9, file$1, 80, 1, 2098);
			attr_dev(meta10, "name", "twitter:data2");
			attr_dev(meta10, "value", meta10_value_value = /*post*/ ctx[0].printReadingTime);
			add_location(meta10, file$1, 81, 1, 2151);
			attr_dev(p, "class", "svelte-1uh130i");
			add_location(p, file$1, 85, 2, 2238);
			attr_dev(h1, "class", "svelte-1uh130i");
			add_location(h1, file$1, 86, 2, 2290);
			attr_dev(hr0, "class", "svelte-1uh130i");
			add_location(hr0, file$1, 87, 2, 2314);
			attr_dev(header, "class", "svelte-1uh130i");
			add_location(header, file$1, 84, 0, 2227);
			attr_dev(article, "class", "content");
			add_location(article, file$1, 90, 2, 2357);
			add_location(hr1, file$1, 93, 2, 2420);
			attr_dev(div, "class", "container");
			add_location(div, file$1, 89, 0, 2331);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			append_dev(document.head, meta3);
			append_dev(document.head, meta4);
			append_dev(document.head, meta5);
			append_dev(document.head, meta6);
			append_dev(document.head, meta7);
			append_dev(document.head, meta8);
			append_dev(document.head, meta9);
			append_dev(document.head, meta10);
			insert_dev(target, t0, anchor);
			insert_dev(target, header, anchor);
			append_dev(header, p);
			append_dev(p, t1);
			append_dev(p, t2);
			append_dev(p, t3);
			append_dev(header, t4);
			append_dev(header, h1);
			append_dev(h1, t5);
			append_dev(header, t6);
			append_dev(header, hr0);
			insert_dev(target, t7, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, article);
			article.innerHTML = raw_value;
			append_dev(div, t8);
			append_dev(div, hr1);
			append_dev(div, t9);
			mount_component(bio, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*post*/ 1) && title_value !== (title_value = /*post*/ ctx[0].title)) {
				document.title = title_value;
			}

			if (!current || dirty & /*post*/ 1 && meta1_content_value !== (meta1_content_value = /*post*/ ctx[0].title)) {
				attr_dev(meta1, "content", meta1_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta2_content_value !== (meta2_content_value = /*post*/ ctx[0].excerpt)) {
				attr_dev(meta2, "content", meta2_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta3_content_value !== (meta3_content_value = /*post*/ ctx[0].excerpt)) {
				attr_dev(meta3, "content", meta3_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta5_value_value !== (meta5_value_value = /*post*/ ctx[0].title)) {
				attr_dev(meta5, "value", meta5_value_value);
			}

			if (!current || dirty & /*post*/ 1 && meta6_content_value !== (meta6_content_value = /*post*/ ctx[0].excerpt)) {
				attr_dev(meta6, "content", meta6_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta8_value_value !== (meta8_value_value = new Date(/*post*/ ctx[0].printDate).toLocaleDateString(undefined, {
				year: "numeric",
				month: "short",
				day: "numeric"
			}))) {
				attr_dev(meta8, "value", meta8_value_value);
			}

			if (!current || dirty & /*post*/ 1 && meta10_value_value !== (meta10_value_value = /*post*/ ctx[0].printReadingTime)) {
				attr_dev(meta10, "value", meta10_value_value);
			}

			if ((!current || dirty & /*post*/ 1) && t1_value !== (t1_value = /*post*/ ctx[0].printDate + "")) set_data_dev(t1, t1_value);
			if ((!current || dirty & /*post*/ 1) && t3_value !== (t3_value = /*post*/ ctx[0].printReadingTime + "")) set_data_dev(t3, t3_value);
			if ((!current || dirty & /*post*/ 1) && t5_value !== (t5_value = /*post*/ ctx[0].title + "")) set_data_dev(t5, t5_value);
			if ((!current || dirty & /*post*/ 1) && raw_value !== (raw_value = /*post*/ ctx[0].html + "")) article.innerHTML = raw_value;		},
		i: function intro(local) {
			if (current) return;
			transition_in(bio.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(bio.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			detach_dev(meta3);
			detach_dev(meta4);
			detach_dev(meta5);
			detach_dev(meta6);
			detach_dev(meta7);
			detach_dev(meta8);
			detach_dev(meta9);
			detach_dev(meta10);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div);
			destroy_component(bio);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	// the `slug` parameter is available because
	// this file is called [slug].html
	const res = await this.fetch(`blog/${params.slug}.json`);

	const data = await res.json();

	if (res.status === 200) {
		return { post: data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", slots, []);
	let { post } = $$props;
	const writable_props = ["post"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	$$self.$capture_state = () => ({ preload, Bio, post });

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [post];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { post: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*post*/ ctx[0] === undefined && !("post" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLmRmMGQ2Y2Q2LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2Jsb2cvW3NsdWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMsIHF1ZXJ5IH0pIHtcbiAgICAvLyB0aGUgYHNsdWdgIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgYmVjYXVzZVxuICAgIC8vIHRoaXMgZmlsZSBpcyBjYWxsZWQgW3NsdWddLmh0bWxcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBibG9nLyR7cGFyYW1zLnNsdWd9Lmpzb25gKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIHJldHVybiB7IHBvc3Q6IGRhdGEgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvcihyZXMuc3RhdHVzLCBkYXRhLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBCaW8gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CaW8uc3ZlbHRlJ1xuICBleHBvcnQgbGV0IHBvc3Rcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIGhlYWRlciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgaGVhZGVyIGgxIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjdlbTtcbiAgfVxuXG4gIGhlYWRlciBwIHtcbiAgICBjb2xvcjogI0FBQTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGZvbnQtZmFtaWx5OiBSdWJpaywgc2Fucy1zZXJpZjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICB9XG5cbiAgaGVhZGVyIGhyIHtcbiAgICBtaW4td2lkdGg6IDEwMHB4O1xuICAgIHdpZHRoOiAzMCU7XG4gIH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPntwb3N0LnRpdGxlfTwvdGl0bGU+XG48IS0tICBJbmNsdWRlIGNhbm9uaWNhbCBsaW5rcyB0byB5b3VyIGJsb2cgLS0+XG48IS0tICAgPGxpbmsgcmVsPVwiY2Fub25pY2FsXCIgaHJlZj1cIlwiIC8+IC0tPlxuICBcbjwhLS0gVmFsaWRhdGUgeW91ciB0d2l0dGVyIGNhcmQgd2l0aCBodHRwczovL2NhcmRzLWRldi50d2l0dGVyLmNvbS92YWxpZGF0b3IgIC0tPlxuPCEtLSBVcGRhdGUgY29udGVudCBwcm9wZXJ0aWVzIHdpdGggeW91ciBVUkwgICAtLT5cbjwhLS0gXHQ8bWV0YSBwcm9wZXJ0eT1cIm9nOnVybFwiIGNvbnRlbnQ9XCJcIn0gLz4gLS0+XG5cdDxtZXRhIHByb3BlcnR5PVwib2c6dHlwZVwiIGNvbnRlbnQ9XCJhcnRpY2xlXCIgLz5cblx0PG1ldGEgcHJvcGVydHk9XCJvZzp0aXRsZVwiIGNvbnRlbnQ9e3Bvc3QudGl0bGV9IC8+XG5cdDxtZXRhIG5hbWU9XCJEZXNjcmlwdGlvblwiIGNvbnRlbnQ9e3Bvc3QuZXhjZXJwdH0gLz5cblx0PG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e3Bvc3QuZXhjZXJwdH0gLz5cbiAgXG48IS0tICBMaW5rIHRvIHlvdXIgcHJlZmVycmVkIGltYWdlICAtLT5cbjwhLS0gXHQ8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD1cIlwiIC8+IC0tPlxuICBcblx0PG1ldGEgbmFtZT1cInR3aXR0ZXI6Y2FyZFwiIGNvbnRlbnQ9XCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIgLz5cbiAgXG48IS0tICBMaW5rIHRvIHlvdXIgRG9tYWluICAtLT5cbjwhLS0gXHQ8bWV0YSBuYW1lPVwidHdpdHRlcjpkb21haW5cIiB2YWx1ZT1cIlwiIC8+IC0tPlxuICBcbjwhLS0gIExpbmsgdG8geW91ciBUd2l0dGVyIEFjY291bnQgIC0tPlxuPCEtLSBcdDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNyZWF0b3JcIiB2YWx1ZT1cIlwiIC8+IC0tPlxuICBcblx0PG1ldGEgbmFtZT1cInR3aXR0ZXI6dGl0bGVcIiB2YWx1ZT17cG9zdC50aXRsZX0gLz5cblx0PG1ldGEgbmFtZT1cInR3aXR0ZXI6ZGVzY3JpcHRpb25cIiBjb250ZW50PXtwb3N0LmV4Y2VycHR9IC8+XG4gIFxuPCEtLSAgTGluayB0byB5b3VyIHByZWZlcnJlZCBpbWFnZSB0byBiZSBkaXNwbGF5ZWQgb24gVHdpdHRlciAoODMyeDUyMHB4KSAtLT5cbjwhLS0gXHQ8bWV0YSBuYW1lPVwidHdpdHRlcjppbWFnZVwiIGNvbnRlbnQ9XCJcIiAvPiAtLT5cbiAgXG5cdDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmxhYmVsMVwiIHZhbHVlPVwiUHVibGlzaGVkIG9uXCIgLz5cblx0PG1ldGFcblx0XHRuYW1lPVwidHdpdHRlcjpkYXRhMVwiXG5cdFx0dmFsdWU9e25ldyBEYXRlKHBvc3QucHJpbnREYXRlKS50b0xvY2FsZURhdGVTdHJpbmcodW5kZWZpbmVkLCB7XG5cdFx0XHR5ZWFyOiAnbnVtZXJpYycsXG5cdFx0XHRtb250aDogJ3Nob3J0Jyxcblx0XHRcdGRheTogJ251bWVyaWMnXG5cdFx0fSl9IC8+XG5cdDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmxhYmVsMlwiIHZhbHVlPVwiUmVhZGluZyBUaW1lXCIgLz5cblx0PG1ldGEgbmFtZT1cInR3aXR0ZXI6ZGF0YTJcIiB2YWx1ZT17cG9zdC5wcmludFJlYWRpbmdUaW1lfSAvPlxuPC9zdmVsdGU6aGVhZD5cblxuPGhlYWRlcj5cbiAgPHA+e3Bvc3QucHJpbnREYXRlfSB+IHtwb3N0LnByaW50UmVhZGluZ1RpbWV9PC9wPlxuICA8aDE+e3Bvc3QudGl0bGV9PC9oMT5cbiAgPGhyIC8+XG48L2hlYWRlcj5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgPGFydGljbGUgY2xhc3M9XCJjb250ZW50XCI+XG4gICAge0BodG1sIHBvc3QuaHRtbH1cbiAgPC9hcnRpY2xlPlxuICA8aHIgLz5cbiAgPEJpbyAvPlxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQXFGTSxHQUFJLElBQUMsU0FBUzs7O3lCQUFLLEdBQUksSUFBQyxnQkFBZ0I7Ozs7eUJBQ3ZDLEdBQUksSUFBQyxLQUFLOzs7Ozs7OzBCQUtOLEdBQUksSUFBQyxJQUFJOzs7Ozs7eUNBaERWLEdBQUksSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZEQVFnQixHQUFJLElBQUMsS0FBSzs7OzZEQUNYLEdBQUksSUFBQyxPQUFPOzs7NkRBQ0wsR0FBSSxJQUFDLE9BQU87Ozs7Ozt5REFhbkIsR0FBSSxJQUFDLEtBQUs7Ozs2REFDRixHQUFJLElBQUMsT0FBTzs7Ozs7OztvREFRMUMsSUFBSSxVQUFDLEdBQUksSUFBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsU0FBUztJQUMzRCxJQUFJLEVBQUUsU0FBUztJQUNmLEtBQUssRUFBRSxPQUFPO0lBQ2QsR0FBRyxFQUFFLFNBQVM7Ozs7Ozs7OzJEQUdrQixHQUFJLElBQUMsZ0JBQWdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttRkF0QzlDLEdBQUksSUFBQyxLQUFLOzs7O2lHQVFnQixHQUFJLElBQUMsS0FBSzs7OztpR0FDWCxHQUFJLElBQUMsT0FBTzs7OztpR0FDTCxHQUFJLElBQUMsT0FBTzs7Ozs2RkFhbkIsR0FBSSxJQUFDLEtBQUs7Ozs7aUdBQ0YsR0FBSSxJQUFDLE9BQU87Ozs7d0ZBUTFDLElBQUksVUFBQyxHQUFJLElBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLFNBQVM7SUFDM0QsSUFBSSxFQUFFLFNBQVM7SUFDZixLQUFLLEVBQUUsT0FBTztJQUNkLEdBQUcsRUFBRSxTQUFTOzs7OzsrRkFHa0IsR0FBSSxJQUFDLGdCQUFnQjs7Ozs2RUFJbEQsR0FBSSxJQUFDLFNBQVM7NkVBQUssR0FBSSxJQUFDLGdCQUFnQjs2RUFDdkMsR0FBSSxJQUFDLEtBQUs7K0VBS04sR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBMUZJLE9BQU8sR0FBRyxNQUFNLEVBQUUsS0FBSzs7O09BR3JDLEdBQUcsU0FBUyxJQUFJLENBQUMsS0FBSyxTQUFTLE1BQU0sQ0FBQyxJQUFJOztPQUMxQyxJQUFJLFNBQVMsR0FBRyxDQUFDLElBQUk7O0tBRXZCLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRztXQUNYLElBQUksRUFBRSxJQUFJOztFQUVuQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU87Ozs7Ozs7T0FPNUIsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
